import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gio, GdkPixbuf
import os
import subprocess

class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Tourbillon", default_width=720, default_height=1440)
        self.set_position(Gtk.WindowPosition.CENTER)
        
        # Création d'un bouton dans la barre de titre
        self.set_decorated(True)
        headerbar = Gtk.HeaderBar()
        headerbar.set_title("Tourbillon")
        headerbar.set_show_close_button(True)
        self.set_titlebar(headerbar)

        # Création d'un TreeView pour afficher les scripts
        self.store = Gtk.ListStore(str, bool)
        self.treeview = Gtk.TreeView(model=self.store)
        self.treeview.set_headers_visible(False)
        renderer_toggle = Gtk.CellRendererToggle()
        renderer_toggle.connect("toggled", self.on_toggle_cell)
        column_toggle = Gtk.TreeViewColumn("", renderer_toggle, active=1)
        self.treeview.append_column(column_toggle)
        renderer_text = Gtk.CellRendererText()
        column_text = Gtk.TreeViewColumn("", renderer_text, text=0)
        self.treeview.append_column(column_text)
        self.fill_store()
        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.add(self.treeview)
        self.add(scrolled_window)
        
        # Création d'un bouton pour exécuter les scripts sélectionnés
        icon = Gio.ThemedIcon(name="media-playback-start")
        image = Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON)
        self.button = Gtk.Button()
        self.button.add(image)
        self.button.connect("clicked", self.on_button_clicked)
        headerbar.pack_end(self.button)

        # Création d'un bouton "À propos"
        about_button = Gtk.Button()
        about_button.set_label("À propos")
        about_button.connect("clicked", self.show_about_dialog)
        headerbar.pack_end(about_button)

        self.show_all()

    def fill_store(self):
        path = os.path.expanduser("~/Documents/Scripts")
        if not os.path.exists(path):
            os.makedirs(path)
        for file in os.listdir(path):
            if file.endswith(".sh") or file.endswith(".py"):
                self.store.append([file, False])

    def on_toggle_cell(self, widget, path):
        self.store[path][1] = not self.store[path][1]

    def on_button_clicked(self, widget):
        for row in self.store:
            if row[1]:
                path = os.path.expanduser("~/Documents/Scripts/" + row[0])
                if row[0].endswith(".sh"):
                    subprocess.Popen(["/bin/sh", path])
                elif row[0].endswith(".py"):
                    subprocess.Popen(["python3", path])

    def show_about_dialog(self, widget):
        about_dialog = Gtk.AboutDialog()
        about_dialog.set_logo(GdkPixbuf.Pixbuf.new_from_file("/usr/share/icons/hicolor/16x16/apps/tourbillon-16.png"))
        about_dialog.set_program_name("Tourbillon")
        about_dialog.set_version("0.2")
        about_dialog.set_authors(["Mr.Charles"])
        about_dialog.set_comments("L'application \"Tourbillon\" est une interface graphique simplifiée permettant d'exécuter des scripts situés dans le dossier \"Documents/Scripts\".")
        about_dialog.run()
        about_dialog.destroy()

win = MainWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
